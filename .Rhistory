model_df %>% filter(date == "2015-07-03") %>% select(contains("Independence"))
model_df %>% filter(date == "2015-07-04") %>% select(contains("Independence"))
model_df %>% filter(date == "2015-07-05") %>% select(contains("Independence"))
model_df %>% filter(date == "2015-07-03") %>% select(contains("Independence"))
model_df %>% filter(date == "2015-07-02") %>% select(contains("Independence"))
model_df %>% filter(date == "2015-07-1") %>% select(contains("Independence"))
val <- 1
lead_val <- function(x) lead(x, val)
ohe_holidays %>%
select(-date, contains("Independence"))
colnames(ohe_holidays)
ohe_holidays %>%
select(-date, contains("IndependenceDay"))
ohe_holidays %>%
select(contains("IndependenceDay"))
ohe_holidays %>%
select(contains("IndependenceDay")) %>%
mutate_all(list(lead_val))
ohe_holidays %>%
select(contains("IndependenceDay")) %>%
mutate_all(list(lead_val)) -> y
ohe_holidays %>%
select(contains("IndependenceDay"))  -> x
tibble(x,y)
tibble(x=x,y)
tibble(x=x,y=y)
tibble(x=x,y=y) %>% View
holiday_lead <- map(seq(1, 2, 1), function(val) {
lead_val <- function(x) lead(x, val)
ohe_holidays %>%
select(contains("IndependenceDay")) %>%
mutate_all(list(lead_val)) %>%
setNames(., nm = paste(names(.), "Lead", val, sep = "_"))
}) %>%
bind_cols()
holiday_lead
ohe_holidays %>%
mutate_at(vars(-date), list(lead_val)) %>%
setNames(., nm = paste(names(.), "Lead", val, sep = "_"))
holiday_lead <- map(seq(1, 2, 1), function(val) {
lead_val <- function(x) lead(x, val)
ohe_holidays %>%
mutate_at(vars(-date), list(lead_val)) %>%
setNames(., nm = paste(names(.), "Lead", val, sep = "_"))
}) %>%
bind_cols()
holiday_lead
holiday_lead <- map(seq(1, 2, 1), function(val) {
lead_val <- function(x) lead(x, val)
ohe_holidays %>%
mutate_at(vars(-date), list(lead_val)) %>%
setNames(., nm = c("date", paste(names(.), "Lead", val, sep = "_")))
}) %>%
bind_cols()
holiday_lead <- map(seq(1, 2, 1), function(val) {
lead_val <- function(x) lead(x, val)
ohe_holidays %>%
mutate_at(vars(-date), list(lead_val)) %>%
setNames(., nm = c(paste(names(.), "Lead", val, sep = "_")))
}) %>%
bind_cols()
holiday_lead
ohe_holidays %>%
select(-date) %>%
mutate_at(list(lead_val)) %>%
setNames(., nm = paste(names(.), "Lead", val, sep = "_")) %>%
mutate(date = ohe_holidays$date)
map(seq(1, 2, 1), function(val) {
lead_val <- function(x) lead(x, val)
ohe_holidays %>%
select(-date) %>%
mutate_at(list(lead_val)) %>%
setNames(., nm = paste(names(.), "Lead", val, sep = "_")) %>%
mutate(date = ohe_holidays$date)
})
holiday_lead <- map(seq(1, 2, 1), function(val) {
lead_val <- function(x) lead(x, val)
ohe_holidays %>%
select(-date) %>%
mutate_all(list(lead_val)) %>%
setNames(., nm = paste(names(.), "Lead", val, sep = "_"))
}) %>%
bind_cols() %>%
mutate(date = ohe_holidays$date)
holiday_lead
holidays_df <- inner_join(ohe_holidays, holiday_lead, by = "date")
holiday_df %>% filter(date == "2015-07-03") %>% select(contains("Independence"))
holidays_df %>% filter(date == "2015-07-03") %>% select(contains("Independence"))
holidays_df
colnames(holidays_df)
holidays_df %>% filter(date == "2015-07-03")
range(holidays_df$date)
View(holidays_df)
ohe_holidays
ohe_holidays <- calendar %>%
select(date, contains("event")) %>%
gather(key, event, -date) %>%
drop_na() %>%
select(-key) %>%
mutate(Ind = 1) %>%
mutate(event = str_replace_all(event, " ", "")) %>%
mutate(event = str_replace_all(event, "[^[:alnum:]]", "")) %>%
mutate(event = paste("event", event, sep = "_")) %>%
distinct() %>%
spread(event, Ind, fill = 0)
ohe_holidays
calendar
ohe_holidays <- calendar %>%
select(date, contains("event")) %>%
gather(key, event, -date) %>%
select(-key) %>%
mutate(Ind = 1) %>%
mutate(event = str_replace_all(event, " ", "")) %>%
mutate(event = str_replace_all(event, "[^[:alnum:]]", "")) %>%
mutate(event = paste("event", event, sep = "_")) %>%
distinct() %>%
spread(event, Ind, fill = 0)
ohe_holidays
holiday_lead <- map(seq(1, 2, 1), function(val) {
lead_val <- function(x) lead(x, val)
ohe_holidays %>%
select(-date) %>%
mutate_all(list(lead_val)) %>%
setNames(., nm = paste(names(.), "Lead", val, sep = "_"))
}) %>%
bind_cols() %>%
mutate(date = ohe_holidays$date)
holidays_df <- inner_join(ohe_holidays, holiday_lead, by = "date")
holidays_df %>% filter(date == "2015-07-03")
holidays_df
holidays_df %>% filter(date == "2015-07-03") %>% select(contains("Independence"))
snap <- calendar %>%
select(date, contains("snap"))
date_enc <- df %>%
mutate(month = month(date),
weekday = wday(date),
monthday = mday(date),
year = year(date)) %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA)) %>%
drop_na()
model_df <- inner_join(date_enc, snap, by = "date") %>%
left_join(holidays_df, by = "date") %>%
replace(is.na(.), 0) %>%
select(-dept_id:-state_id)
rf <- ranger(
Value ~ .,
data = model_df %>% select(-date),
num.trees = 1000,
mtry = ncol(model_df)-2
)
yardstick::rmse_vec(model_df$Value, rf$predictions)
plot_ly(model_df, x = ~date) %>%
add_lines(y = ~Value, name = "Actual") %>%
add_lines(y = rf$predictions, name = "Pred")
model_df %>% filter(date == "2015-07-03") %>% select(contains("Independence"))
model_df %>% filter(date %in% c("2015-07-02", "2015-07-03", "2015-07-04")) %>% select(Value, contains("Independence"))
model_df %>% filter(date >= "2015-07-02", date <= "2015-07-04") %>% select(Value, contains("Independence"))
model_df %>% filter(date >= "2015-07-02", date <= "2015-07-04") %>% select(date, Value, contains("Independence"))
# US Open (Sundays)
us_open <- read_csv("data/us_open.csv") %>%
mutate(date = lubridate::mdy(date)) %>%
mutate(USO_Sunday = 1) %>%
select(-event)
# MLB schedule for teams in WI, CA, and TX
mlb <- read_csv('data/mlb_games.csv')
# Horse racing (triple crown)
horse_race <- read_csv("data/horse_racing.csv") %>%
mutate(date = lubridate::mdy(date)) %>%
mutate(Horse_Race = 1) %>%
spread(event, Horse_Race, fill = 0)
# Combine football, nba, us open, mlb, and horse racing
ohe_sports <- left_join(football, nba_finals, by = "date") %>%
left_join(us_open, by = "date") %>%
left_join(mlb, by = "date") %>%
left_join(horse_race, by = "date") %>%
replace(is.na(.), 0)
football <- calendar %>%
select(date, weekday, month) %>%
distinct() %>%
mutate(NFL_Sun = ifelse(weekday == "Sunday" & (month > 8 | month < 2), 1, 0)) %>%
mutate(NCAA_Sat = ifelse(weekday == "Saturday" & (month > 8 & month <= 12), 1, 0)) %>%
select(date, NFL_Sun, NCAA_Sat) %>%
distinct()
# Combine football, nba, us open, mlb, and horse racing
ohe_sports <- left_join(football, nba_finals, by = "date") %>%
left_join(us_open, by = "date") %>%
left_join(mlb, by = "date") %>%
left_join(horse_race, by = "date") %>%
replace(is.na(.), 0)
nba_finals <- read_csv("data/nba_finals.csv")
# US Open (Sundays)
us_open <- read_csv("data/us_open.csv") %>%
mutate(date = lubridate::mdy(date)) %>%
mutate(USO_Sunday = 1) %>%
select(-event)
# MLB schedule for teams in WI, CA, and TX
mlb <- read_csv('data/mlb_games.csv')
# Horse racing (triple crown)
horse_race <- read_csv("data/horse_racing.csv") %>%
mutate(date = lubridate::mdy(date)) %>%
mutate(Horse_Race = 1) %>%
spread(event, Horse_Race, fill = 0)
# Combine football, nba, us open, mlb, and horse racing
ohe_sports <- left_join(football, nba_finals, by = "date") %>%
left_join(us_open, by = "date") %>%
left_join(mlb, by = "date") %>%
left_join(horse_race, by = "date") %>%
replace(is.na(.), 0)
ohe_sports
model_df <- inner_join(date_enc, snap, by = "date") %>%
left_join(holidays_df, by = "date") %>%
left_join(ohe_sports, by = "date") %>%
replace(is.na(.), 0) %>%
select(-dept_id:-state_id)
rf <- ranger(
Value ~ .,
data = model_df %>% select(-date),
num.trees = 1000,
mtry = ncol(model_df)-2
)
colnames(model_df)
us_open
rf
yardstick::rmse_vec(model_df$Value, rf$predictions)
model_df <- inner_join(date_enc, snap, by = "date") %>%
left_join(holidays_df, by = "date") %>%
left_join(ohe_sports, by = "date") %>%
replace(is.na(.), 0) %>%
select(-dept_id:-state_id)
colnames(model_df)
rf <- ranger(
Value ~ .,
data = model_df %>% select(-date),
num.trees = 1000,
mtry = ncol(model_df)-2
)
plot_ly(model_df, x = ~date) %>%
add_lines(y = ~Value, name = "Actual") %>%
add_lines(y = rf$predictions, name = "Pred")
rf <- ranger(
Value ~ .,
data = model_df %>% select(-date),
num.trees = 1000,
mtry = ncol(model_df)/2
)
plot_ly(model_df, x = ~date) %>%
add_lines(y = ~Value, name = "Actual") %>%
add_lines(y = rf$predictions, name = "Pred")
yardstick::rmse_vec(model_df$Value, rf$predictions)
prophet_pred
model_df
(prophet_pred$yhat + rf$predictions)
ens <- (prophet_pred$yhat + rf$predictions)/2
plot_ly(model_df, x = ~date) %>%
add_lines(y = ~Value, name = "Actual") %>%
add_lines(y = ens, name = "Pred")
yardstick::rmse_vec(model_df$Value, ens)
plot_ly(model_df, x = ~date) %>%
add_lines(y = ~Value, name = "Actual") %>%
add_lines(y = ens, name = "Pred")
plot_ly(model_df, x = ~date) %>%
add_lines(y = ~Value, name = "Actual") %>%
add_lines(y = ens, name = "Pred")
plot_ly(model_df, x = ~date) %>%
add_lines(y = ~Value, name = "Actual") %>%
add_lines(y = rf$predictions, name = "Pred")
agg_sales %>% count(dept_id)
dept_splits <- agg_sales %>% split(.$dept_id)
dept_splits
calendar
date_enc <- calendar %>%
mutate(month = month(date),
weekday = wday(date),
monthday = mday(date),
year = year(date))
date_enc
calendar %>%
mutate(month = month(date),
weekday = wday(date),
monthday = mday(date),
year = year(date)) %>%
select(date, month:year)
iris$Species <- as.character(iris$Species)
ranger(Sepal.Length ~ ., data = iris)
ranger(Sepal.Length ~ ., data = iris, importance = "impurity")
ranger(Sepal.Length ~ ., data = iris, importance = "impurity") -> rf
rf$variable.importance
iris
head(iris)
str(iris)
# ML
dept_splits <- agg_sales %>% split(.$dept_id)
df <- dept_splits$FOODS_1
df
df %>%
arrange(store_id, date)
date_enc <- df %>%
arrange(store_id, date) %>%
group_by(store_id) %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA)) %>%
drop_na()
date_enc
df %>%
arrange(store_id, date) %>%
group_by(store_id) %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollSd30 = lag(RollSd30, 28))
roll_lags <- df %>%
arrange(store_id, date) %>%
group_by(store_id) %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollSd30 = lag(RollSd30, 28)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA)) %>%
mutate(RollMean30 = lag(RollMean30, 28))
roll_lags
roll_lags <- df %>%
arrange(store_id, date) %>%
group_by(store_id) %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollSd30 = lag(RollSd30, 28)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA)) %>%
mutate(RollMean30 = lag(RollMean30, 28)) %>%
drop_na()
roll_lags
roll_lags <- df %>%
arrange(store_id, date) %>%
group_by(store_id) %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollSd30 = lag(RollSd30, 28)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA)) %>%
mutate(RollMean30 = lag(RollMean30, 28)) %>%
drop_na() %>%
ungroup()
roll_lags
inner_join(roll_lags, snap, by = "date") %>%
left_join(holidays_df, by = "date")
inner_join(roll_lags, snap, by = "date") %>%
left_join(holidays_df, by = "date") %>%
left_join(ohe_sports, by = "date")
inner_join(roll_lags, snap, by = "date") %>%
left_join(holidays_df, by = "date") %>%
left_join(ohe_sports, by = "date") %>%
replace(is.na(.), 0)
inner_join(roll_lags, snap, by = "date") %>%
left_join(holidays_df, by = "date") %>%
left_join(ohe_sports, by = "date") %>%
replace(is.na(.), 0) %>% colnames()
model_df <- inner_join(roll_lags, snap, by = "date") %>%
left_join(holidays_df, by = "date") %>%
left_join(ohe_sports, by = "date") %>%
replace(is.na(.), 0) %>%
select(-dept_id, -state_id)
colnames(model_df)
range(model_df$date)
rf <- ranger(
Value ~ .,
data = model_df %>% select(-date),
num.trees = 1000,
mtry = ncol(model_df)/2
)
rf
rf$predictions
df
colnames(model_df)
range(snap$date)
range(holidays_df$date)
range(ohe_sports$date)
model_df %>%
filter(date >= "2016-04-25")
model_df %>%
filter(date >= "2016-03-25")
model_df %>%
filter(date >= "2016-03-25") %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA))
model_df %>%
filter(date >= "2016-03-25") %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA))  %>%
drop_na()
model_df %>%
filter(date >= "2016-03-25") %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA))  %>%
drop_na() %>%
filter(date >= "2016-04-25")
model_df %>%
select(date, store_id, Value) %>%
filter(date >= "2016-03-25") %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA))  %>%
drop_na() %>%
filter(date >= "2016-04-25")
model_df %>%
select(date, store_id, Value) %>%
filter(date >= "2016-03-25") %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA))  %>%
drop_na() %>%
filter(date >= "2016-04-25") %>%
mutate(date = days(28))
model_df %>%
select(date, store_id, Value) %>%
filter(date >= "2016-03-25") %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA))  %>%
drop_na() %>%
filter(date >= "2016-04-25") %>%
mutate(date = date + days(28))
model_df %>%
select(date, store_id, Value) %>%
filter(date >= "2016-03-25") %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA))  %>%
drop_na() %>%
filter(date >= "2016-04-25") %>%
mutate(date = date + days(28)) %>% count(date)
model_df %>%
select(date, store_id, Value) %>%
filter(date >= "2016-03-25") %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA))  %>%
drop_na() %>%
filter(date >= "2016-04-25") %>%
mutate(date = date + days(28)) %>%
inner_join(snap, by = "date")
model_df %>%
select(date, store_id, Value) %>%
filter(date >= "2016-03-25") %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA))  %>%
drop_na() %>%
filter(date >= "2016-04-25") %>%
mutate(date = date + days(28)) %>%
inner_join(snap, by = "date") %>%
left_join(holidays_df, by = "date") %>%
left_join(ohe_sports, by = "date")
model_df %>%
select(date, store_id, Value) %>%
filter(date >= "2016-03-25") %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA))  %>%
drop_na() %>%
filter(date >= "2016-04-25") %>%
mutate(date = date + days(28)) %>%
inner_join(snap, by = "date") %>%
left_join(holidays_df, by = "date") %>%
left_join(ohe_sports, by = "date")  %>% drop_na()
model_df %>%
select(date, store_id, Value) %>%
filter(date >= "2016-03-25") %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA))  %>%
drop_na() %>%
filter(date >= "2016-04-25") %>%
mutate(date = date + days(28)) %>%
inner_join(snap, by = "date") %>%
left_join(holidays_df, by = "date") %>%
left_join(ohe_sports, by = "date") %>% view
model_df %>%
select(date, store_id, Value) %>%
filter(date >= "2016-03-25") %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA))  %>%
drop_na() %>%
filter(date >= "2016-04-25") %>%
mutate(date = date + days(28)) %>%
inner_join(snap, by = "date") %>%
left_join(holidays_df, by = "date") %>%
left_join(ohe_sports, by = "date") %>%
replace_na(0)
model_df %>%
select(date, store_id, Value) %>%
filter(date >= "2016-03-25") %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA))  %>%
drop_na() %>%
filter(date >= "2016-04-25") %>%
mutate(date = date + days(28)) %>%
inner_join(snap, by = "date") %>%
left_join(holidays_df, by = "date") %>%
left_join(ohe_sports, by = "date") %>%
replace(is.na(.), 0)
future_df <- model_df %>%
select(date, store_id, Value) %>%
filter(date >= "2016-03-25") %>%
mutate(RollSd30 = zoo::rollapply(Value, 28, sd, fill=NA)) %>%
mutate(RollMean30 = zoo::rollapply(Value, 28, mean, fill=NA))  %>%
drop_na() %>%
filter(date >= "2016-04-25") %>%
mutate(date = date + days(28)) %>%
inner_join(snap, by = "date") %>%
left_join(holidays_df, by = "date") %>%
left_join(ohe_sports, by = "date") %>%
replace(is.na(.), 0)
predict(rf, data = future_df)
predict(rf, data = future_df)$predictions
future_df %>%
select(date) %>%
mutate(pred = predict(rf, data = future_df)$predictions)
colnames(future_df)
store_id
future_df$store_id
head(model_df)
future_df %>%
select(date, store_id) %>%
mutate(dept_id = unique(df$dept_id)) %>%
mutate(pred = predict(rf, data = future_df)$predictions)
rm(list=ls())
gc()
